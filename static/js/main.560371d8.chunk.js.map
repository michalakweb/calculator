{"version":3,"sources":["redux/reducer/calcReducer.js","redux/store.js","App.js","redux/actions/actions.js","serviceWorker.js","index.js"],"names":["calcReducer","state","arguments","length","undefined","action","type","incrementBy","store","createStore","App","react_default","a","createElement","console","log","this","props","Component","getState","subscribe","dispatch","incrementAction","reduxedApp","connect","Boolean","window","location","hostname","match","jsx","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAUeA,EATK,WAAuB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvC,OAAQC,EAAOC,MACX,IAAK,YACD,OAAOL,EAAQI,EAAOE,YAC1B,QACI,OAAON,ICHNO,EAAQC,YAAYT,UCK3BU,mLAEF,OACEC,EAAAC,EAAAC,cAAA,WACGC,QAAQC,IAAIC,KAAKC,OADpB,qBAHYC,aAWlBJ,QAAQC,IAAIP,EAAMW,YAElBX,EAAMY,UAAU,kBAAMN,QAAQC,IAAIP,EAAMW,cACxCX,EAAMa,SCtByB,iBAAsB,CACjDf,KAAM,YACNC,YAF2BL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,GDsB/BoB,CAAgB,IAG/B,IAMeC,EAFIC,YAJK,SAACvB,GAAD,MAAY,CAClCA,UAGiBuB,CAAyBd,GEjBxBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EACFnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAUvB,MAAOA,GACbG,EAAAC,EAAAC,cAACmB,EAAD,OAIRC,IAASC,OAAOJ,EAAKK,SAASC,eAAe,SDiHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.560371d8.chunk.js","sourcesContent":["\r\nconst calcReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case \"INCREMENT\":\r\n            return state + action.incrementBy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default calcReducer;","import {createStore} from 'redux';\r\nimport calcReducer from './reducer/calcReducer';\r\n\r\nexport const store = createStore(calcReducer);","import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\n//Redux\r\nimport {incrementAction} from './redux/actions/actions';\r\nimport {store} from './redux/store';\r\nimport {connect} from 'react-redux';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {console.log(this.props)}\r\n        Calculator\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconsole.log(store.getState());\r\n\r\nstore.subscribe(() => console.log(store.getState()))\r\nstore.dispatch(incrementAction(5));\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  state\r\n})\r\n\r\nconst reduxedApp = connect(mapStateToProps)(App);\r\n\r\nexport default reduxedApp;\r\n\r\n// 1. \r\n// Set store: reducer, action, define store\r\n// Dispatch a test action\r\n\r\n// 2. \r\n// Connect redux state with App component\r\n// Send App to GithubPages\r\n// Organise file structure\r\n// Show state on componenet and get button for calculations\r\n\r\n","export const incrementAction = (incrementBy = 1) => ({\r\n    type: 'INCREMENT',\r\n    incrementBy\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//Redux\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nconst jsx = (\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}