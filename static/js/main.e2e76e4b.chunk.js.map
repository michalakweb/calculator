{"version":3,"sources":["serviceWorker.js","redux/actions/actions.js","redux/reducer/calcReducer.js","redux/store.js","App.js","components/Dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","incrementAction","type","incrementBy","arguments","length","undefined","decrementAction","decrementBy","resetAction","calcReducer","state","action","store","createStore","App","handleAdd","_this","props","dispatch","handleMinus","handleReset","react_default","a","createElement","Container","this","Button","onClick","react_router_dom","to","Component","subscribe","console","log","getState","reduxedApp","connect","Dashboard","jsx","es","react_router","exact","path","component","ReduxedApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6IClBOC,SAAkB,iBAAsB,CACjDC,KAAM,YACNC,YAF2BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,KAKjCG,EAAkB,iBAAsB,CACjDL,KAAM,YACNM,YAF2BJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,IAKjCK,EAAc,iBAAO,CAC9BP,KAAM,kBCGKQ,EAbK,WAAuB,IAAtBC,EAAsBP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGQ,EAAWR,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvC,OAAQM,EAAOV,MACX,IAAK,YACD,OAAOS,EAAQC,EAAOT,YAC1B,IAAK,YACD,OAAOQ,EAAQC,EAAOJ,YAC1B,IAAK,QACD,OAAO,EACX,QACI,OAAOG,ICPNE,EAAQC,YAAYJ,WCU3BK,6MACJC,UAAY,WACVC,EAAKC,MAAMC,SAASlB,QAGtBmB,YAAc,WACZH,EAAKC,MAAMC,SAASZ,QAGtBc,YAAc,WACZJ,EAAKC,MAAMC,SAASV,8EAIpB,OACEa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BAAmBE,KAAKR,MAAMP,OAC9BW,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAASF,KAAKV,WAAtB,KACAM,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAASF,KAAKN,aAAtB,KACAE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,QAASF,KAAKL,aAAtB,SAEAC,EAAAC,EAAAC,cAAA,gCAEAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAT,4BAzBQC,aAgClBlB,EAAMmB,UAAU,kBAAMC,QAAQC,IAAIrB,EAAMsB,cAExC,IAMeC,EAFIC,YAJK,SAAC1B,GAAD,MAAY,CAClCA,UAGiB0B,CAAyBtB,GCzC7BuB,EAPG,kBACdhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAT,mBCSFS,EACFjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAU3B,MAAOA,GACbS,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,4CAA4CC,UAAWN,IACzEhB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWC,MAK9CC,IAASC,OAAOR,EAAKS,SAASC,eAAe,SNyGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2e76e4b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const incrementAction = (incrementBy = 1) => ({\r\n    type: 'INCREMENT',\r\n    incrementBy\r\n});\r\n\r\nexport const decrementAction = (decrementBy = 1) => ({\r\n    type: 'DECREMENT',\r\n    decrementBy\r\n});\r\n\r\nexport const resetAction = () => ({\r\n    type: 'RESET'\r\n});\r\n","\r\nconst calcReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case \"INCREMENT\":\r\n            return state + action.incrementBy;\r\n        case \"DECREMENT\":\r\n            return state - action.decrementBy;\r\n        case \"RESET\":\r\n            return 0;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default calcReducer;","import {createStore} from 'redux';\r\nimport calcReducer from './reducer/calcReducer';\r\n\r\nexport const store = createStore(calcReducer);","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//CSS\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Container, Button} from 'react-bootstrap';\r\nimport './App.scss';\r\n\r\n//Redux\r\nimport {incrementAction, decrementAction, resetAction} from './redux/actions/actions';\r\nimport {store} from './redux/store';\r\nimport {connect} from 'react-redux';\r\n\r\nclass App extends Component {\r\n  handleAdd = () => {\r\n    this.props.dispatch(incrementAction());\r\n  }\r\n\r\n  handleMinus = () => {\r\n    this.props.dispatch(decrementAction());\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.props.dispatch(resetAction());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <h1>Counter</h1>\r\n          <p>Current Count: {this.props.state}</p>\r\n          <Button onClick={this.handleAdd}>+</Button>\r\n          <Button onClick={this.handleMinus}>-</Button>\r\n          <Button onClick={this.handleReset}>Reset</Button>\r\n\r\n          <p>Info from Firebase:</p>\r\n\r\n          <Link to='/'>Go to dashboard</Link>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nstore.subscribe(() => console.log(store.getState()))\r\n\r\nconst mapStateToProps = (state) => ({\r\n  state\r\n})\r\n\r\nconst reduxedApp = connect(mapStateToProps)(App);\r\n\r\nexport default reduxedApp;\r\n\r\n// 1. \r\n// Set store: reducer, action, define store x\r\n// Dispatch a test action x\r\n\r\n// 2. \r\n// Connect redux state with App component x\r\n// Send App to GithubPages x\r\n// Organise file structure x\r\n// Show state on componenet and get button for calculations x\r\n\r\n// 3.\r\n// Add Bootstrap x\r\n// Add SimpleRouting\r\n// Read initial data from Firebase\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Dashboard = () => (\r\n    <div>\r\n        <h1>Welcome to the dashboard</h1>\r\n        <Link to='/counter'>Go to counter</Link>\r\n    </div>\r\n);\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\r\n\r\n//Components\r\nimport ReduxedApp from './App';\r\nimport Dashboard from './components/Dashboard';\r\n\r\n//Redux\r\nimport {store} from './redux/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nconst jsx = (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <Route exact path='https://michalakweb.github.io/calculator/' component={Dashboard}/>\r\n            <Route path='/counter' component={ReduxedApp}/>\r\n        </Router>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(jsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}